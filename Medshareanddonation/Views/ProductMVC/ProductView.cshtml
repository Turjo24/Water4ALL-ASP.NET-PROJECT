<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Products - Medshare & Donation</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gray-50 min-h-screen">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b sticky top-0 z-10">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <div class="flex items-center space-x-4">
                    <h1 class="text-2xl font-bold text-gray-900">
                        <i class="fas fa-pills mr-2 text-blue-600"></i>
                        Aqueous Solutions
                    </h1>
                </div>
                <div class="flex items-center space-x-4">
                    <!-- Admin Indicator -->
                    <div id="adminIndicator" class="hidden">
                        <span class="bg-purple-100 text-purple-800 px-3 py-1 rounded-full text-sm font-semibold">
                            <i class="fas fa-crown mr-1"></i>Admin View
                        </span>
                    </div>
                    <!-- Search Bar -->
                    <div class="relative hidden md:block">
                        <input type="text"
                               id="searchInput"
                               placeholder="Search products..."
                               class="w-64 pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center">
                            <i class="fas fa-search text-gray-400"></i>
                        </div>
                    </div>
                    <!-- Category Filter -->
                    <select id="categoryFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <option value="">All Categories</option>
                    </select>
                </div>
            </div>
        </div>
    </header>

    <!-- Loading State -->
    <div id="loadingState" class="flex justify-center items-center min-h-screen">
        <div class="text-center">
            <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p class="text-gray-600 text-lg">Loading products...</p>
        </div>
    </div>

    <!-- Main Content -->
    <main id="mainContent" class="hidden max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Filters and Sort -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-8">
            <div class="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
                <div class="flex items-center space-x-4">
                    <span class="text-gray-700 font-medium">Sort by:</span>
                    <select id="sortSelect" class="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                        <option value="name_asc">Name (A-Z)</option>
                        <option value="name_desc">Name (Z-A)</option>
                        <option value="price_asc">Price (Low to High)</option>
                        <option value="price_desc">Price (High to Low)</option>
                    </select>
                </div>
                <div class="flex items-center space-x-4">
                    <span id="productCount" class="text-gray-600"></span>
                    <div class="flex items-center space-x-2">
                        <button id="gridView" class="p-2 rounded-lg bg-blue-100 text-blue-600">
                            <i class="fas fa-th-large"></i>
                        </button>
                        <button id="listView" class="p-2 rounded-lg text-gray-400 hover:bg-gray-100">
                            <i class="fas fa-list"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Products Grid -->
        <div id="productsContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            <!-- Products will be loaded here -->
        </div>

        <!-- No Products Found -->
        <div id="noProductsFound" class="hidden text-center py-16">
            <div class="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                <i class="fas fa-search text-3xl text-gray-400"></i>
            </div>
            <h3 class="text-2xl font-bold text-gray-900 mb-2">No Products Found</h3>
            <p class="text-gray-600 mb-6">Try adjusting your search criteria or browse all categories.</p>
            <button id="clearFilters" class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors">
                Clear Filters
            </button>
        </div>
    </main>

    <!-- Error State -->
    <div id="errorState" class="hidden min-h-screen flex items-center justify-center">
        <div class="text-center bg-white rounded-2xl shadow-xl p-12 max-w-md mx-4">
            <div class="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6">
                <i class="fas fa-exclamation-triangle text-3xl text-red-600"></i>
            </div>
            <h2 class="text-2xl font-bold text-gray-900 mb-4">Something went wrong</h2>
            <p class="text-gray-600 mb-8">We couldn't load the products. Please try again.</p>
            <button id="retryButton" class="bg-blue-600 hover:bg-blue-700 text-white py-3 px-8 rounded-lg font-semibold transition-colors">
                <i class="fas fa-redo mr-2"></i>Try Again
            </button>
        </div>
    </div>

    <script>
        const API_BASE_URL = 'https://localhost:7217/api/ProductsApi';
        let allProducts = [];
        let filteredProducts = [];
        let currentView = 'grid';
        let isAdmin = false;

        // Decode JWT token to get user role
        function getUserRoleFromToken() {
            const token = localStorage.getItem('token');
            if (!token) return null;

            try {
                const base64Url = token.split('.')[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));

                const payload = JSON.parse(jsonPayload);
                return payload['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] ||
                       payload.role ||
                       payload['https://schemas.microsoft.com/ws/2008/06/identity/claims/role'];
            } catch (error) {
                console.error('Error decoding token:', error);
                return null;
            }
        }

        // Setup UI based on user role
        function setupUIForUserRole() {
            const userRole = getUserRoleFromToken();
            isAdmin = userRole === 'Admin';

            if (isAdmin) {
                document.getElementById('adminIndicator').classList.remove('hidden');
            } else {
                document.getElementById('adminIndicator').classList.add('hidden');
            }
        }

        // State management
        function showLoading() {
            document.getElementById('loadingState').classList.remove('hidden');
            document.getElementById('mainContent').classList.add('hidden');
            document.getElementById('errorState').classList.add('hidden');
        }

        function showMainContent() {
            document.getElementById('loadingState').classList.add('hidden');
            document.getElementById('mainContent').classList.remove('hidden');
            document.getElementById('errorState').classList.add('hidden');
        }

        function showError() {
            document.getElementById('loadingState').classList.add('hidden');
            document.getElementById('mainContent').classList.add('hidden');
            document.getElementById('errorState').classList.remove('hidden');
        }

        // Get authorization headers
        function getAuthHeaders() {
            const token = localStorage.getItem('token');
            return token ? { 'Authorization': `Bearer ${token}` } : {};
        }

        // Load products from API
        async function loadProducts() {
            showLoading();
            try {
                const response = await fetch(API_BASE_URL, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        ...getAuthHeaders()
                    }
                });

                if (response.ok) {
                    allProducts = await response.json();
                    filteredProducts = [...allProducts];

                    // Setup UI for role
                    setupUIForUserRole();

                    // Load categories for filter
                    loadCategories();

                    // Display products
                    displayProducts();
                    updateProductCount();
                    showMainContent();
                } else {
                    console.error('Failed to load products:', response.status);
                    showError();
                }
            } catch (error) {
                console.error('Error loading products:', error);
                showError();
            }
        }

        // Load unique categories from products
        function loadCategories() {
            const categories = [...new Set(allProducts.map(p => p.category).filter(Boolean))];
            const categorySelect = document.getElementById('categoryFilter');

            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });
        }

        // Create product card HTML - Grid View
        function createProductCard(product) {
            const imageUrl = product.imageUrl || 'https://placehold.co/200x150?text=Product&font=Lato';
            const categoryBadge = product.category ? `<span class="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium mb-2">${product.category}</span>` : '';

            // Admin buttons (View Details + Delete)
            const adminButtons = `
                <div class="flex flex-col space-y-2 mt-auto">
                    <a href="/ProductMVC/Details/${product.id}"
                       class="w-full bg-purple-600 hover:bg-purple-700 text-white py-2 px-4 rounded-lg font-semibold transition-colors text-center">
                        <i class="fas fa-eye mr-2"></i>View Details
                    </a>
                    <button onclick="confirmDeleteProduct(${product.id}, '${product.name.replace(/'/g, "\\'")}')"
                            class="w-full bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded-lg font-semibold transition-colors">
                        <i class="fas fa-trash-alt mr-2"></i>Delete Product
                    </button>
                </div>
            `;

            // Regular user buttons (View Details + Add to Cart)
            const regularButtons = `
                <div class="flex space-x-2 justify-end mt-auto">
                    <a href="/ProductMVC/Details/${product.id}"
                       class="flex-1 bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg font-semibold transition-colors text-center">
                        <i class="fas fa-eye mr-2"></i>View Details
                    </a>
                    <button onclick="addToCart(${product.id})"
                            class="bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-lg font-semibold transition-colors">
                        <i class="fas fa-cart-plus"></i>
                    </button>
                </div>
            `;

            return `
                <div class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1 flex flex-col h-full">
                    <div class="relative">
                        <img src="${imageUrl}"
                             alt="${product.name}"
                             class="w-full h-64 object-cover"
                             onerror="this.src='https://placehold.co/200x150?text=Product&font=Lato'">
                        <div class="absolute top-4 right-4">
                            <span class="bg-green-500 text-white px-3 py-1 rounded-full text-sm font-semibold">
                                <i class="fas fa-check-circle mr-1"></i>Available
                            </span>
                        </div>
                        ${isAdmin ? '<div class="absolute top-4 left-4"><span class="bg-purple-500 text-white px-2 py-1 rounded-full text-xs font-semibold"><i class="fas fa-crown mr-1"></i>Admin</span></div>' : ''}
                    </div>
                    <div class="p-6 flex flex-col flex-grow">
                        <h1 class="">${categoryBadge}</h1>
                        <h3 class="text-xl font-bold text-gray-900 mb-2 line-clamp-2">${product.name}</h3>
                        <p class="text-gray-600 mb-4 line-clamp-3 h-[9.5vh]">${product.description || 'No description available'}</p>
                        <div class="flex justify-between items-center mb-4">
                            <div class="flex items-baseline space-x-1">
                                <span class="text-2xl font-bold ${isAdmin ? 'text-purple-600' : 'text-blue-600'}">৳${product.price}</span>
                                <span class="text-sm text-gray-500">BDT</span>
                            </div>
                        </div>
                        ${isAdmin ? adminButtons : regularButtons}
                    </div>
                </div>
            `;
        }

        // Create list view product card
        function createProductListCard(product) {
            const imageUrl = product.imageUrl || 'https://placehold.co/200x150?text=Product&font=Lato';
            const categoryBadge = product.category ? `<span class="inline-block bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium">${product.category}</span>` : '';

            // Admin buttons (View Details + Delete)
            const adminButtons = `
                <div class="flex flex-col justify-center space-y-2 ml-6">
                    <a href="/ProductMVC/Details/${product.id}"
                       class="bg-purple-600 hover:bg-purple-700 text-white py-2 px-6 rounded-lg font-semibold transition-colors text-center whitespace-nowrap">
                        <i class="fas fa-eye mr-2"></i>View Details
                    </a>
                    <button onclick="confirmDeleteProduct(${product.id}, '${product.name.replace(/'/g, "\\'")}')"
                            class="bg-red-600 hover:bg-red-700 text-white py-2 px-6 rounded-lg font-semibold transition-colors whitespace-nowrap">
                        <i class="fas fa-trash-alt mr-2"></i>Delete Product
                    </button>
                </div>
            `;

            // Regular user buttons (View Details + Add to Cart)
            const regularButtons = `
                <div class="flex flex-col justify-center space-y-2 ml-6">
                    <a href="/ProductMVC/Details/${product.id}"
                       class="bg-blue-600 hover:bg-blue-700 text-white py-2 px-6 rounded-lg font-semibold transition-colors text-center whitespace-nowrap">
                        <i class="fas fa-eye mr-2"></i>View Details
                    </a>
                    <button onclick="addToCart(${product.id})"
                            class="bg-green-600 hover:bg-green-700 text-white py-2 px-6 rounded-lg font-semibold transition-colors">
                        <i class="fas fa-cart-plus mr-2"></i>Add to Cart
                    </button>
                </div>
            `;

            return `
                <div class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 flex">
                    <div class="relative flex-shrink-0">
                        <img src="${imageUrl}"
                             alt="${product.name}"
                             class="w-48 h-32 object-cover"
                             onerror="this.src='https://placehold.co/200x150?text=Product&font=Lato'">
                        ${isAdmin ? '<div class="absolute top-2 left-2"><span class="bg-purple-500 text-white px-2 py-1 rounded-full text-xs font-semibold"><i class="fas fa-crown mr-1"></i>Admin</span></div>' : ''}
                    </div>
                    <div class="flex-1 p-6 flex justify-between">
                        <div class="flex-1">
                            ${categoryBadge}
                            <h3 class="text-xl font-bold text-gray-900 mb-2">${product.name}</h3>
                            <p class="text-gray-600 mb-4 line-clamp-2">${product.description || 'No description available'}</p>
                            <div class="flex items-baseline space-x-1">
                                <span class="text-2xl font-bold ${isAdmin ? 'text-purple-600' : 'text-blue-600'}">৳${product.price}</span>
                                <span class="text-sm text-gray-500">BDT</span>
                            </div>
                        </div>
                        ${isAdmin ? adminButtons : regularButtons}
                    </div>
                </div>
            `;
        }

        // Display products
        function displayProducts() {
            const container = document.getElementById('productsContainer');
            const noProductsDiv = document.getElementById('noProductsFound');

            if (filteredProducts.length === 0) {
                container.classList.add('hidden');
                noProductsDiv.classList.remove('hidden');
                return;
            }

            container.classList.remove('hidden');
            noProductsDiv.classList.add('hidden');

            if (currentView === 'grid') {
                container.className = 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6';
                container.innerHTML = filteredProducts.map(product => createProductCard(product)).join('');
            } else {
                container.className = 'space-y-4';
                container.innerHTML = filteredProducts.map(product => createProductListCard(product)).join('');
            }
        }

        // Update product count
        function updateProductCount() {
            document.getElementById('productCount').textContent = `${filteredProducts.length} Products Found`;
        }

        // Filter and search functionality
        function filterProducts() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const selectedCategory = document.getElementById('categoryFilter').value;

            filteredProducts = allProducts.filter(product => {
                const matchesSearch = product.name.toLowerCase().includes(searchTerm) ||
                                    (product.description && product.description.toLowerCase().includes(searchTerm));
                const matchesCategory = !selectedCategory || product.category === selectedCategory;

                return matchesSearch && matchesCategory;
            });

            sortProducts();
        }

        // Sort products
        function sortProducts() {
            const sortValue = document.getElementById('sortSelect').value;

            switch (sortValue) {
                case 'name_asc':
                    filteredProducts.sort((a, b) => a.name.localeCompare(b.name));
                    break;
                case 'name_desc':
                    filteredProducts.sort((a, b) => b.name.localeCompare(a.name));
                    break;
                case 'price_asc':
                    filteredProducts.sort((a, b) => a.price - b.price);
                    break;
                case 'price_desc':
                    filteredProducts.sort((a, b) => b.price - a.price);
                    break;
            }

            displayProducts();
            updateProductCount();
        }

        // Add to cart functionality (only for non-admin users)
        async function addToCart(productId) {
            if (isAdmin) {
                return; // Admins cannot add to cart
            }

            try {
                const response = await fetch('/CartMVC/AddToCart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        ...getAuthHeaders(),
                    },
                    body: JSON.stringify({
                        productId: productId,
                        quantity: 1
                    })
                });

                if (response.ok) {
                    // Show success message
                    const product = allProducts.find(p => p.id === productId);
                    showNotification(`${product.name} added to cart!`, 'success');
                } else {
                    showNotification('Failed to add product to cart.', 'error');
                }
            } catch (error) {
                console.error('Error adding to cart:', error);
                showNotification('An error occurred while adding to cart.', 'error');
            }
        }

        // Confirm delete product (Admin only)
        function confirmDeleteProduct(productId, productName) {
            if (!isAdmin) {
                showNotification('You do not have permission to delete products.', 'error');
                return;
            }

            const modal = document.createElement('div');
            modal.id = 'deleteConfirmModal';
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4';
            modal.innerHTML = `
                <div class="bg-white rounded-xl p-8 max-w-md w-full text-center shadow-2xl">
                    <div class="text-red-500 text-6xl mb-6">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <h3 class="text-2xl font-bold text-gray-900 mb-4">Delete Product</h3>
                    <p class="text-gray-600 mb-2">Are you sure you want to delete:</p>
                    <p class="text-lg font-semibold text-gray-900 mb-6">"${productName}"</p>
                    <p class="text-sm text-red-600 mb-8">This action cannot be undone!</p>
                    <div class="flex space-x-4">
                        <button onclick="closeDeleteModal()"
                                class="flex-1 bg-gray-500 hover:bg-gray-600 text-white py-3 px-6 rounded-lg transition-colors font-semibold">
                            <i class="fas fa-times mr-2"></i>Cancel
                        </button>
                        <button onclick="deleteProduct(${productId})"
                                class="flex-1 bg-red-600 hover:bg-red-700 text-white py-3 px-6 rounded-lg transition-colors font-semibold">
                            <i class="fas fa-trash-alt mr-2"></i>Delete
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);
            document.body.style.overflow = 'hidden';
        }

        // Close delete confirmation modal
        function closeDeleteModal() {
            const modal = document.getElementById('deleteConfirmModal');
            if (modal) {
                modal.remove();
                document.body.style.overflow = 'auto';
            }
        }

        // Delete product (Admin only)
        async function deleteProduct(productId) {
            if (!isAdmin) {
                showNotification('You do not have permission to delete products.', 'error');
                return;
            }

            try {
                const response = await fetch(`${API_BASE_URL}/${productId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        ...getAuthHeaders(),
                    }
                });

                if (response.ok) {
                    // Remove product from arrays
                    allProducts = allProducts.filter(p => p.id !== productId);
                    filteredProducts = filteredProducts.filter(p => p.id !== productId);

                    // Refresh display
                    displayProducts();
                    updateProductCount();

                    // Close modal and show success
                    closeDeleteModal();
                    showNotification('Product deleted successfully!', 'success');
                } else if (response.status === 403) {
                    showNotification('You do not have permission to delete products.', 'error');
                } else if (response.status === 404) {
                    showNotification('Product not found.', 'error');
                } else {
                    const errorText = await response.text();
                    showNotification(`Failed to delete product: ${errorText}`, 'error');
                }
            } catch (error) {
                console.error('Error deleting product:', error);
                showNotification('An error occurred while deleting the product.', 'error');
            } finally {
                closeDeleteModal();
            }
        }

        // Show notification
        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transition-all duration-300 ${
                type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
            }`;
            notification.innerHTML = `
                <div class="flex items-center space-x-2">
                    <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // Clear all filters
        function clearAllFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('categoryFilter').value = '';
            document.getElementById('sortSelect').value = 'name_asc';
            filteredProducts = [...allProducts];
            sortProducts();
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Load products
            loadProducts();

            // Search functionality
            document.getElementById('searchInput').addEventListener('input', filterProducts);

            // Filter functionality
            document.getElementById('categoryFilter').addEventListener('change', filterProducts);

            // Sort functionality
            document.getElementById('sortSelect').addEventListener('change', sortProducts);

            // View toggle
            document.getElementById('gridView').addEventListener('click', function() {
                currentView = 'grid';
                this.classList.add('bg-blue-100', 'text-blue-600');
                this.classList.remove('text-gray-400', 'hover:bg-gray-100');
                document.getElementById('listView').classList.remove('bg-blue-100', 'text-blue-600');
                document.getElementById('listView').classList.add('text-gray-400', 'hover:bg-gray-100');
                displayProducts();
            });

            document.getElementById('listView').addEventListener('click', function() {
                currentView = 'list';
                this.classList.add('bg-blue-100', 'text-blue-600');
                this.classList.remove('text-gray-400', 'hover:bg-gray-100');
                document.getElementById('gridView').classList.remove('bg-blue-100', 'text-blue-600');
                document.getElementById('gridView').classList.add('text-gray-400', 'hover:bg-gray-100');
                displayProducts();
            });

            // Clear filters
            document.getElementById('clearFilters').addEventListener('click', clearAllFilters);

            // Retry button
            document.getElementById('retryButton').addEventListener('click', loadProducts);
        });

        // Add CSS for line clamping
        const style = document.createElement('style');
        style.textContent = `
            .line-clamp-2 {
                display: -webkit-box;
                -webkit-line-clamp: 2;
                -webkit-box-orient: vertical;
                overflow: hidden;
            }
            .line-clamp-3 {
                display: -webkit-box;
                -webkit-line-clamp: 3;
                -webkit-box-orient: vertical;
                overflow: hidden;
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>