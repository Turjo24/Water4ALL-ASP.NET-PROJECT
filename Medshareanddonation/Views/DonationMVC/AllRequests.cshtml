<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>All Donation Requests</title>

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
          theme: {
            extend: {
              colors: {
                primary: '#3B82F6',
                secondary: '#10B981'
              }
            }
          }
        };
    </script>

    <style>
        html, body {
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

            html::-webkit-scrollbar,
            body::-webkit-scrollbar {
                display: none;
            }

        .dropdown {
            position: relative;
            display: inline-block;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f9f9f9;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
            max-height: 200px;
            overflow-y: auto;
            border-radius: 4px;
        }

            .dropdown-content a {
                color: black;
                padding: 8px 12px;
                text-decoration: none;
                display: block;
                font-size: 12px;
            }

                .dropdown-content a:hover {
                    background-color: #f1f1f1;
                }

        .dropdown:hover .dropdown-content {
            display: block;
        }
    </style>
</head>

<body class="bg-white text-gray-800 font-sans p-8">

    <h2 class="text-4xl font-bold text-center mt-6 mb-10">All Donation Requests</h2>

    <!-- Header row -->
    <div class="grid grid-cols-12 gap-4 font-bold border-b pb-2 mb-2 px-10 bg-neutral-200/50 p-2">
        <div class="col-span-2 text-center">Name</div>
        <div class="col-span-1 text-center">Phone</div>
        <div class="col-span-2 text-center">Location</div>
        <div class="col-span-1 text-center">Liters</div>
        <div class="col-span-2 text-center">Reason</div>
        <div class="col-span-1 text-center">Status</div>
        <div class="col-span-1 text-center">Volunteer</div>
        <div class="col-span-2 text-center">Actions</div>
    </div>

    <!-- Data rows -->
    <div id="allRequestsGrid" class="px-10 space-y-1"></div>

    <script>
        let volunteers = [];

        async function loadVolunteers() {
          try {
            const token = localStorage.getItem("token");
            if (!token) return;

            const response = await fetch("https://localhost:7217/api/user/Volunteers", {
              headers: {
                "Authorization": `Bearer ${token}`
              }
            });

            if (response.ok) {
              volunteers = await response.json();
            }
          } catch (err) {
            console.error("Error loading volunteers:", err);
          }
        }

        async function loadAllRequests() {
          try {
            const token = localStorage.getItem("token");
            if (!token) {
              alert("Please login to view requests.");
              return;
            }

            // Load volunteers first
            await loadVolunteers();

            const response = await fetch("https://localhost:7217/api/donation/AllRequests", {
              headers: {
                "Authorization": `Bearer ${token}`
              }
            });

            if (!response.ok) throw new Error("Failed to fetch requests");

            const requests = await response.json();
            const container = document.getElementById("allRequestsGrid");
            container.innerHTML = "";

            const statusMap = {
              Approved: { cls: "text-green-500 bg-green-100 border-green-500", color: "#22C55E" },
              Rejected: { cls: "text-red-500 bg-red-100 border-red-500", color: "#EF4444" },
              Pending:  { cls: "text-yellow-500 bg-yellow-100 border-yellow-500", color: "#FE971E" }
            };

            requests.forEach(req => {
              const row = document.createElement("div");
              row.className = "grid grid-cols-12 gap-4 border-b border-gray-300 min-h-[10vh] items-center py-2";

              const status = statusMap[req.status] || statusMap.Pending;

              // Find assigned volunteer name
              let assignedVolunteerDisplay = "Select Volunteer";
              if (req.assignedVolunteerId && req.assignedVolunteerId !== "NULL") {
                const volunteer = volunteers.find(v => v.id === req.assignedVolunteerId);
                if (volunteer) {
                  assignedVolunteerDisplay = volunteer.name;
                } else {
                  assignedVolunteerDisplay = "Unknown";
                }
              }

              // Create volunteer dropdown options
              let volunteerOptions = '';
              volunteers.forEach(volunteer => {
                const isSelected = req.assignedVolunteerId === volunteer.id ? 'font-bold bg-blue-100' : '';
                volunteerOptions += `<a href="#" class="${isSelected}" onclick="assignVolunteer(${req.id}, '${volunteer.id}', '${volunteer.name}'); event.preventDefault();">${volunteer.name}<br><span class="text-xs text-gray-500">${volunteer.email}</span></a>`;
              });

              row.innerHTML = `
                <div class="col-span-2 text-center text-sm">${req.name}</div>
                <div class="col-span-1 text-center text-sm">${req.phoneNumber}</div>
                <div class="col-span-2 text-center text-xs">${req.locationAddress}</div>
                <div class="col-span-1 text-center text-sm">${req.waterLiters} L</div>
                <div class="col-span-2 text-center text-xs">${req.reason}</div>
                <div class="col-span-1 flex items-center text-xs justify-center gap-2 border-2 p-1 rounded-lg ${status.cls}">
                  <svg fill="${status.color}" width="16" height="16" viewBox="0 0 20 20">
                    <path d="M7.8 10a2.2 2.2 0 0 0 4.4 0 2.2 2.2 0 0 0-4.4 0z"/>
                  </svg>
                  <span class="-translate-x-2">${req.status}</span>
                </div>
                <div class="col-span-1 text-center">
                  <div class="dropdown">
                    <button class="bg-blue-100 border border-blue-300 text-blue-700 px-2 py-1 rounded text-xs hover:bg-blue-200 w-full min-h-[40px] flex items-center justify-center">
                      <div class="text-center">
                        <div class="font-semibold">${assignedVolunteerDisplay}</div>
                        ${req.assignedVolunteerId && req.assignedVolunteerId !== "NULL" && volunteers.find(v => v.id === req.assignedVolunteerId) ? `<div class="text-xs text-blue-600">${volunteers.find(v => v.id === req.assignedVolunteerId).email}</div>` : ''}
                      </div>
                      <svg class="inline w-3 h-3 ml-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                      </svg>
                    </button>
                    <div class="dropdown-content">
                      <a href="#" onclick="assignVolunteer(${req.id}, '', ''); event.preventDefault();" class="border-b border-gray-200 text-red-600 font-semibold">Remove Assignment</a>
                      ${volunteerOptions}
                    </div>
                  </div>
                </div>
                <div class="col-span-2 flex flex-col items-center gap-1">
                  <div class="flex gap-1 w-full">
                    <button onclick="changeStatus(${req.id}, 'Approved')" class="text-green-600 border-2 border-green-500 bg-green-100 p-1 rounded text-xs flex-1 hover:bg-green-200">Approve</button>
                    <button onclick="changeStatus(${req.id}, 'Rejected')" class="text-red-600 border-2 border-red-500 bg-red-100 p-1 rounded text-xs flex-1 hover:bg-red-200">Reject</button>
                  </div>
                </div>
              `;

              container.appendChild(row);
            });
          } catch (err) {
            console.error(err);
            alert("Error loading donation requests.");
          }
        }

        async function changeStatus(id, status) {
          try {
            const token = localStorage.getItem("token");
            const response = await fetch(`https://localhost:7217/api/donation/ChangeStatus/${id}?status=${status}`, {
              method: "PUT",
              headers: {
                "Authorization": `Bearer ${token}`
              }
            });

            if (!response.ok) throw new Error("Failed to change status");

            alert("Status updated!");
            loadAllRequests(); // Reload data
          } catch (err) {
            console.error(err);
            alert("Error updating status");
          }
        }

        async function assignVolunteer(requestId, volunteerId, volunteerName) {
          try {
            const token = localStorage.getItem("token");

            // Use "NULL" if no volunteer selected
            const assignId = volunteerId || "NULL";

            const response = await fetch(`https://localhost:7217/api/donation/AssignVolunteer/${requestId}?volunteerId=${assignId}`, {
              method: "PUT",
              headers: {
                "Authorization": `Bearer ${token}`
              }
            });

            if (!response.ok) throw new Error("Failed to assign volunteer");

            const message = volunteerId ? `Volunteer "${volunteerName}" assigned!` : "Volunteer assignment removed!";
            alert(message);
            loadAllRequests(); // Reload data
          } catch (err) {
            console.error(err);
            alert("Error assigning volunteer");
          }
        }

        // Load on page load
        document.addEventListener("DOMContentLoaded", loadAllRequests);
    </script>
</body>
</html>