@model string
@{
    ViewData["Title"] = "Update Username";
}

<div class="flex justify-center items-center min-h-screen bg-gray-100">
    <div class="bg-white shadow-lg rounded-2xl p-8 w-full max-w-md">
        <h2 class="text-2xl font-bold text-center text-gray-800 mb-6">Update Username</h2>

        <input type="text" id="newName" class="border rounded px-3 py-2 w-full mb-4" value="@Model" />

        <div class="flex justify-between">
            <button id="saveBtn" class="px-4 py-2 rounded-lg bg-green-500 text-white hover:bg-green-600">
                Save
            </button>
            <a href="/Profile/AdminProfile" class="px-4 py-2 rounded-lg bg-gray-400 text-white hover:bg-gray-500">
                Cancel
            </a>
        </div>
    </div>
</div>

<script>
    // Function to update username in database and localStorage
    async function updateUserName(newName) {
        const token = localStorage.getItem('token');
        if (!token) throw new Error("No token found! Please login.");

        // Update database via API
        const res = await fetch('/Profile/UpdateName', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ newName })
        });

        if (!res.ok) {
            const text = await res.text();
            throw new Error(text);
        }

        // Update localStorage
        localStorage.setItem('userName', newName);

        return res.json();
    }

    // Button click handler
    document.getElementById("saveBtn").addEventListener("click", async () => {
        const newName = document.getElementById("newName").value.trim();
        if (!newName) { alert("Username cannot be empty"); return; }

        try {
            const data = await updateUserName(newName);
            if (data.success) {
                alert("Username updated permanently!");
                window.location.href = "/Profile/AdminProfile"; // redirect
            }
        } catch(err) {
            console.error(err);
            alert("Update failed: " + err.message);
        }
    });

    // Pre-fill input with current username from token
    document.addEventListener("DOMContentLoaded", () => {
        const token = localStorage.getItem("token");
        if (!token) return;

        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            const name = payload["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"]
                      || payload["name"] || payload["Name"] || "";

            document.getElementById("newName").value = name;
        } catch(err) {
            console.error("Error parsing JWT:", err);
        }
    });
</script>
