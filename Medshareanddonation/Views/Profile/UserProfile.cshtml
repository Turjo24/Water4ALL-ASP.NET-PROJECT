<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Profile Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#4F46E5',
                        secondary: '#06B6D4',
                        accent: '#8B5CF6',
                        success: '#10B981',
                        dark: '#1E293B',
                        'dark-secondary': '#334155',
                    },
                    fontFamily: {
                        'display': ['Inter', 'system-ui', 'sans-serif'],
                    },
                    animation: {
                        'fade-in': 'fadeIn 0.5s ease-in-out',
                        'slide-up': 'slideUp 0.3s ease-out',
                        'pulse-slow': 'pulse 2s infinite',
                        'shimmer': 'shimmer 1.5s infinite',
                    },
                    keyframes: {
                        fadeIn: {
                            '0%': { opacity: '0', transform: 'translateY(10px)' },
                            '100%': { opacity: '1', transform: 'translateY(0)' }
                        },
                        slideUp: {
                            '0%': { opacity: '0', transform: 'translateY(20px)' },
                            '100%': { opacity: '1', transform: 'translateY(0)' }
                        },
                        shimmer: {
                            '0%': { backgroundPosition: '-200% 0' },
                            '100%': { backgroundPosition: '200% 0' }
                        }
                    }
                },
            },
        };
    </script>
    <style>
        html, body {
            scrollbar-width: none;
            -ms-overflow-style: none;
        }

            html::-webkit-scrollbar,
            body::-webkit-scrollbar {
                display: none;
            }

        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        .card-shadow {
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        .shimmer {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: shimmer 1.5s infinite;
        }

        .glass-morphism {
            background: rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }
    </style>
</head>
<body class="font-display min-h-screen gradient-bg flex items-center justify-center p-4">
    <!-- Background decorative elements -->
    <div class="fixed inset-0 overflow-hidden pointer-events-none">
        <div class="absolute -top-40 -right-40 w-80 h-80 bg-white opacity-10 rounded-full blur-3xl"></div>
        <div class="absolute -bottom-40 -left-40 w-80 h-80 bg-white opacity-10 rounded-full blur-3xl"></div>
    </div>

    <div class="relative w-full max-w-2xl mx-auto mt-10">
        <!-- Header Section -->
        <div class="text-center mb-8 animate-fade-in">
            <div class="inline-flex items-center justify-center w-24 h-24 bg-white bg-opacity-20 rounded-full mb-4 backdrop-blur-sm">
                <img src="/images/Profile.png" alt="Profile" class="object-cover w-full h-full rounded-full" />
            </div>
            <h1 id="profileTitle" class="text-4xl text-black font-bold mb-2 drop-shadow-lg">
                Loading Profile...
            </h1>
            <p class="text-black text-opacity-80 text-lg">Manage your account information</p>
        </div>

        <!-- Main Profile Card -->
        <div class="bg-white card-shadow rounded-3xl p-8 mb-6 animate-slide-up">
            <!-- Profile Info Grid -->
            <div class="grid gap-6">
                <div class="flex items-center space-x-4 p-4 bg-gray-50 rounded-2xl transition-all duration-300 hover:bg-gray-100">
                    <div class="flex-shrink-0 w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                        </svg>
                    </div>
                    <div class="flex-1">
                        <p class="text-sm font-medium text-gray-500">Full Name</p>
                        <p id="userNameDisplay" class="text-lg font-semibold text-gray-900 shimmer">Loading...</p>
                    </div>
                </div>

                <div class="flex items-center space-x-4 p-4 bg-gray-50 rounded-2xl transition-all duration-300 hover:bg-gray-100">
                    <div class="flex-shrink-0 w-12 h-12 bg-gradient-to-br from-green-500 to-teal-600 rounded-xl flex items-center justify-center">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z"></path>
                        </svg>
                    </div>
                    <div class="flex-1">
                        <p class="text-sm font-medium text-gray-500">Username</p>
                        <p id="userNameField" class="text-lg font-semibold text-gray-900 shimmer">Loading...</p>
                    </div>
                </div>

                <div class="flex items-center space-x-4 p-4 bg-gray-50 rounded-2xl transition-all duration-300 hover:bg-gray-100">
                    <div class="flex-shrink-0 w-12 h-12 bg-gradient-to-br from-red-500 to-pink-600 rounded-xl flex items-center justify-center">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                        </svg>
                    </div>
                    <div class="flex-1">
                        <p class="text-sm font-medium text-gray-500">Email Address</p>
                        <p id="email" class="text-lg font-semibold text-gray-900 shimmer">Loading...</p>
                    </div>
                </div>

                <div class="flex items-center space-x-4 p-4 bg-gray-50 rounded-2xl transition-all duration-300 hover:bg-gray-100">
                    <div class="flex-shrink-0 w-12 h-12 bg-gradient-to-br from-yellow-500 to-orange-600 rounded-xl flex items-center justify-center">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    <div class="flex-1">
                        <p class="text-sm font-medium text-gray-500">Role</p>
                        <span id="role" class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 shimmer">Loading...</span>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="flex items-center space-x-4 p-4 bg-gray-50 rounded-2xl transition-all duration-300 hover:bg-gray-100">
                        <div class="flex-shrink-0 w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                        </div>
                        <div class="flex-1">
                            <p class="text-xs font-medium text-gray-500">Created</p>
                            <p id="createdAt" class="text-sm font-semibold text-gray-900 shimmer">Loading...</p>
                        </div>
                    </div>

                    <div class="flex items-center space-x-4 p-4 bg-gray-50 rounded-2xl transition-all duration-300 hover:bg-gray-100">
                        <div class="flex-shrink-0 w-10 h-10 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-lg flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                            </svg>
                        </div>
                        <div class="flex-1">
                            <p class="text-xs font-medium text-gray-500">Updated</p>
                            <p id="updatedAt" class="text-sm font-semibold text-gray-900 shimmer">Loading...</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Button -->
            <div class="mt-8 flex justify-center">
                <button id="showUpdateBtn" class="group relative px-8 py-3 bg-gradient-to-r from-primary to-secondary text-white font-semibold rounded-2xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-blue-300">
                    <span class="flex items-center space-x-2">
                        <svg class="w-5 h-5 group-hover:rotate-12 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                        </svg>
                        <span>Update Profile</span>
                    </span>
                </button>
            </div>
        </div>

        <!-- Update Form Modal -->
        <div id="updateForm" class="bg-white card-shadow rounded-3xl p-8 hidden animate-slide-up">
            <div class="text-center mb-6">
                <h3 class="text-2xl font-bold text-gray-900 mb-2">Update Profile</h3>
                <p class="text-gray-600">Make changes to your account information</p>
            </div>

            <form class="space-y-6">
                <div class="space-y-4">
                    <div class="group">
                        <label for="newName" class="block text-sm font-semibold text-gray-700 mb-2 group-focus-within:text-primary transition-colors">
                            Full Name
                        </label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <svg class="h-5 w-5 text-gray-400 group-focus-within:text-primary transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                </svg>
                            </div>
                            <input id="newName" type="text" placeholder="Enter your full name"
                                   class="w-full pl-10 pr-4 py-3 border-2 border-gray-200 rounded-2xl focus:border-primary focus:ring-4 focus:ring-blue-100 transition-all duration-300 outline-none text-gray-900 placeholder-gray-400" />
                        </div>
                    </div>

                    <div class="group">
                        <label for="newUserName" class="block text-sm font-semibold text-gray-700 mb-2 group-focus-within:text-primary transition-colors">
                            Username
                        </label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <svg class="h-5 w-5 text-gray-400 group-focus-within:text-primary transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z"></path>
                                </svg>
                            </div>
                            <input id="newUserName" type="text" placeholder="Enter your username"
                                   class="w-full pl-10 pr-4 py-3 border-2 border-gray-200 rounded-2xl focus:border-primary focus:ring-4 focus:ring-blue-100 transition-all duration-300 outline-none text-gray-900 placeholder-gray-400" />
                        </div>
                    </div>
                </div>

                <div class="flex space-x-4 pt-4">
                    <button id="cancelUpdateBtn" type="button"
                            class="flex-1 py-3 px-6 bg-gray-100 text-gray-700 font-semibold rounded-2xl hover:bg-gray-200 transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-gray-300">
                        <span class="flex items-center justify-center space-x-2">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                            <span>Cancel</span>
                        </span>
                    </button>
                    <button id="updateBtn" type="button"
                            class="flex-1 py-3 px-6 bg-gradient-to-r from-success to-green-600 text-white font-semibold rounded-2xl hover:shadow-lg transform hover:scale-105 transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-green-300">
                        <span class="flex items-center justify-center space-x-2">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                            <span>Save Changes</span>
                        </span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="fixed top-4 right-4 z-50 transform translate-x-full transition-transform duration-300">
        <div class="bg-white rounded-2xl shadow-2xl p-4 flex items-center space-x-3 min-w-80">
            <div id="toastIcon" class="flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center">
                <!-- Icon will be inserted by JavaScript -->
            </div>
            <div>
                <p id="toastMessage" class="text-sm font-semibold text-gray-900"></p>
                <p id="toastSubMessage" class="text-xs text-gray-500"></p>
            </div>
        </div>
    </div>

    <script>
        // Toast notification system
        function showToast(message, type = 'info', subMessage = '') {
            const toast = document.getElementById('toast');
            const toastIcon = document.getElementById('toastIcon');
            const toastMessage = document.getElementById('toastMessage');
            const toastSubMessage = document.getElementById('toastSubMessage');

            const icons = {
                success: '<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>',
                error: '<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>',
                info: '<svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>'
            };

            const colors = {
                success: 'bg-green-500',
                error: 'bg-red-500',
                info: 'bg-blue-500'
            };

            toastIcon.className = `flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${colors[type]}`;
            toastIcon.innerHTML = icons[type];
            toastMessage.textContent = message;
            toastSubMessage.textContent = subMessage;

            toast.classList.remove('translate-x-full');

            setTimeout(() => {
                toast.classList.add('translate-x-full');
            }, 4000);
        }

        function formatDate(dateString) {
            if (!dateString) return 'Not available';
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function removeShimmer() {
            document.querySelectorAll('.shimmer').forEach(el => {
                el.classList.remove('shimmer');
            });
        }

        async function loadUserProfile() {
            const token = localStorage.getItem("token");
            if (!token) {
                showToast("Authentication required", "error", "Please login to continue");
                return;
            }

            try {
                const response = await fetch('/Profile/GetProfile', {
                    headers: { 'Authorization': 'Bearer ' + token }
                });

                if (!response.ok) {
                    if (response.status === 401) {
                        showToast("Session expired", "error", "Please login again");
                        setTimeout(() => {
                            window.location.href = '/Login';
                        }, 2000);
                    } else {
                        const text = await response.text();
                        showToast("Failed to load profile", "error", text);
                    }
                    return;
                }

                const data = await response.json();
                console.log(data);

                // Remove loading shimmer
                removeShimmer();

                // Display fields
                document.getElementById('userNameDisplay').textContent = data.name || 'Not provided';
                document.getElementById('userNameField').textContent = data.userName || 'Not provided';
                document.getElementById('email').textContent = data.email || 'Not provided';

                // Role with styling
                const roleElement = document.getElementById('role');
                const role = data.role || 'User';
                const roleClasses = role.toLowerCase() === 'admin'
                    ? 'bg-purple-100 text-purple-800'
                    : 'bg-blue-100 text-blue-800';
                roleElement.className = `inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${roleClasses}`;
                roleElement.textContent = role;

                document.getElementById('createdAt').textContent = formatDate(data.createdAt);
                document.getElementById('updatedAt').textContent = formatDate(data.updatedAt);

                // Prefill update inputs
                document.getElementById('newName').value = data.name || '';
                document.getElementById('newUserName').value = data.userName || '';

                // Set dynamic title and header based on role
                const titleText = role.toLowerCase() === 'admin' ? 'Admin Dashboard' : 'User Dashboard';
                document.title = titleText;
                document.getElementById('profileTitle').textContent = `Welcome, ${data.name || 'User'}!`;

                showToast("Profile loaded successfully", "success", "All information is up to date");

            } catch (err) {
                console.error('Error loading profile:', err);
                showToast("Connection error", "error", "Please check your internet connection");
                removeShimmer();
            }
        }

        async function updateProfile() {
            const token = localStorage.getItem("token");
            const newName = document.getElementById('newName').value.trim();
            const newUserName = document.getElementById('newUserName').value.trim();

            if (!newName || !newUserName) {
                showToast("Validation error", "error", "Please fill in both name and username");
                return;
            }
            if (!token) {
                showToast("Authentication required", "error", "Please login to continue");
                return;
            }

            // Add loading state to update button
            const updateBtn = document.getElementById('updateBtn');
            const originalContent = updateBtn.innerHTML;
            updateBtn.innerHTML = '<svg class="animate-spin w-5 h-5 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>';
            updateBtn.disabled = true;

            try {
                const response = await fetch('/Profile/UpdateProfile', {
                    method: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + token,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ NewName: newName, NewUserName: newUserName })
                });

                if (!response.ok) {
                    const text = await response.text();
                    showToast("Update failed", "error", text);
                    return;
                }

                const data = await response.json();
                showToast("Profile updated", "success", "Your changes have been saved");

                // Refresh profile info and hide form
                loadUserProfile();
                hideUpdateForm();
            } catch (err) {
                console.error('Error updating profile:', err);
                showToast("Connection error", "error", "Please try again later");
            } finally {
                updateBtn.innerHTML = originalContent;
                updateBtn.disabled = false;
            }
        }

        function showUpdateForm() {
            document.getElementById('updateForm').classList.remove('hidden');
            document.getElementById('showUpdateBtn').parentElement.parentElement.classList.add('hidden');
            // Focus first input
            setTimeout(() => {
                document.getElementById('newName').focus();
            }, 100);
        }

        function hideUpdateForm() {
            document.getElementById('updateForm').classList.add('hidden');
            document.getElementById('showUpdateBtn').parentElement.parentElement.classList.remove('hidden');
        }

        document.addEventListener("DOMContentLoaded", () => {
            loadUserProfile();

            document.getElementById('showUpdateBtn').addEventListener('click', showUpdateForm);
            document.getElementById('cancelUpdateBtn').addEventListener('click', (e) => {
                e.preventDefault();
                hideUpdateForm();
            });
            document.getElementById('updateBtn').addEventListener('click', (e) => {
                e.preventDefault();
                updateProfile();
            });

            // Add keyboard shortcuts
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    hideUpdateForm();
                }
            });
        });
    </script>
</body>
</html>