<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    @{
        ViewData["Title"] = "Admin - All Orders";
    }
    <title>Admin - All Orders</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
</head>
<body class="bg-gray-50 min-h-screen">
    @* <nav class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <a href="/dashboard" class="text-gray-600 hover:text-blue-600 transition-colors">
                    <i class="fas fa-arrow-left mr-2"></i>Back to Dashboard
                </a>
                <span class="text-gray-800 font-semibold text-lg">
                    <i class="fas fa-shopping-cart mr-2"></i>All Orders
                </span>
                <div class="text-gray-600">
                    <i class="fas fa-user-shield mr-1"></i>Admin Panel
                </div>
            </div>
        </div>
    </nav> *@

    <div class="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div class="mb-6 text-center">
            <h1 class="text-3xl font-bold text-gray-900 mb-2">Order Management</h1>
            <p class="text-gray-600">Manage and view all customer orders</p>
        </div>

        <!-- Loading State -->
        <div id="loadingState" class="flex justify-center items-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            <span class="ml-3 text-gray-600">Loading orders...</span>
        </div>

        <!-- Orders Container -->
        <div id="ordersContainer" class="hidden">
            <div class="mb-4 bg-white rounded-lg shadow p-4">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                    <div class="text-sm text-gray-600">
                        Total Orders: <span id="totalOrders" class="font-semibold text-gray-900">0</span>
                    </div>
                    <div class="flex gap-2">
                        <select id="statusFilter" class="px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="">All Status</option>
                            <option value="Pending">Pending</option>
                            <option value="Confirmed">Confirmed</option>
                            <option value="Shipped">Shipped</option>
                            <option value="Delivered">Delivered</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                        <button onclick="refreshOrders()" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                            <i class="fas fa-sync-alt mr-1"></i>Refresh
                        </button>
                    </div>
                </div>
            </div>

            <div id="ordersGrid" class="grid gap-6 lg:grid-cols-2 xl:grid-cols-3">
                <!-- Orders will be populated here -->
            </div>
        </div>

        <!-- Empty State -->
        <div id="emptyState" class="hidden text-center py-12">
            <div class="w-20 h-20 rounded-full bg-gray-100 flex items-center justify-center mx-auto mb-4">
                <i class="fas fa-shopping-cart text-3xl text-gray-400"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">No orders found</h3>
            <p id="emptyStateMessage" class="text-gray-500">There are no orders to display at the moment.</p>
        </div>
    </div>

    @section Scripts {
        <script>
            async function fetchOrders(statusFilter = '') {
                try {
                    showLoading();

                    const token = localStorage.getItem("token");
                    if (!token) {
                        alert("No admin token found");
                        hideLoading();
                        return;
                    }

                    const response = await fetch("/api/OrdersApi/AllOrders", {
                        headers: {
                            "Authorization": `Bearer ${token}`,
                            "Content-Type": "application/json"
                        }
                    });

                    if (!response.ok) {
                        alert(`Failed to fetch orders: ${response.status} ${response.statusText}`);
                        hideLoading();
                        return;
                    }

                    let orders = await response.json();
                    console.log("Raw API response:", orders);

                    // Apply status filter if provided
                    if (statusFilter) {
                        orders = orders.filter(order =>
                            order.status && order.status.toLowerCase() === statusFilter.toLowerCase()
                        );
                        console.log("Filtered orders:", orders);
                    }

                    // Sort orders by status
                    orders.sort((a, b) => {
                        const statusOrder = ['Pending', 'Confirmed', 'Shipped', 'Delivered', 'Cancelled'];
                        const aStatus = a.status ? a.status.toLowerCase() : 'unknown';
                        const bStatus = b.status ? b.status.toLowerCase() : 'unknown';
                        return statusOrder.indexOf(aStatus) - statusOrder.indexOf(bStatus);
                    });

                    console.log("Orders length before rendering:", orders.length);
                    renderOrders(orders, statusFilter);
                    hideLoading();

                } catch (err) {
                    console.error("Error fetching orders:", err);
                    alert("Error fetching orders: " + err.message);
                    hideLoading();
                }
            }

            function renderOrders(orders, statusFilter) {
                const ordersGrid = document.getElementById('ordersGrid');
                const totalOrdersSpan = document.getElementById('totalOrders');
                const emptyState = document.getElementById('emptyState');
                const emptyStateMessage = document.getElementById('emptyStateMessage');
                const ordersContainer = document.getElementById('ordersContainer');

                totalOrdersSpan.textContent = orders.length;

                if (orders.length === 0) {
                    ordersContainer.classList.add('hidden');
                    emptyState.classList.remove('hidden');
                    emptyStateMessage.textContent = statusFilter
                        ? `No orders found with status "${statusFilter.charAt(0).toUpperCase() + statusFilter.slice(1)}".`
                        : "There are no orders to display at the moment.";
                    return;
                }

                ordersContainer.classList.remove('hidden');
                emptyState.classList.add('hidden');

                            ordersGrid.innerHTML = orders.map(order => `
                <div class="bg-white rounded-2xl shadow-sm border border-gray-200 overflow-hidden hover:shadow-md transition-shadow">
                    <div class="p-6 flex flex-col h-full">
                        <!-- Order Header -->
                        <div class="flex justify-between items-start mb-4">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900">Order #${order.id}</h3>
                                <p class="text-sm text-gray-500">User: ${order.userId}</p>
                                <p class="text-sm text-gray-500">${new Date(order.orderDate).toLocaleString()}</p>
                            </div>
                            <select onchange="updateStatus(${order.id}, this.value)" class="px-3 py-1 text-xs font-medium rounded-full ${getStatusBadge(order.status)}">
                                <option value="Pending" ${order.status === "Pending" ? "selected" : ""}>Pending</option>
                                <option value="Confirmed" ${order.status === "Confirmed" ? "selected" : ""}>Confirmed</option>
                                <option value="Shipped" ${order.status === "Shipped" ? "selected" : ""}>Shipped</option>
                                <option value="Delivered" ${order.status === "Delivered" ? "selected" : ""}>Delivered</option>
                                <option value="Cancelled" ${order.status === "Cancelled" ? "selected" : ""}>Cancelled</option>
                            </select>
                        </div>

                        <!-- Total Amount -->
                        <div class="mb-4 p-3 bg-gray-50 rounded-lg">
                            <div class="flex justify-between items-center">
                                <span class="text-gray-700 font-medium">Total Amount</span>
                                <span class="text-xl font-bold text-gray-900">৳${order.totalAmount.toFixed(2)}</span>
                            </div>
                            <div class="text-sm text-gray-500 mt-1">
                                Payment: ${order.paymentMethod}
                            </div>
                        </div>

                        <!-- Shipping Info -->
                        <div class="border-t pt-4 mb-4">
                            <h4 class="text-sm font-semibold text-gray-900 mb-2">
                                <i class="fas fa-shipping-fast mr-1 text-blue-600"></i>Shipping Details
                            </h4>
                            <div class="text-sm text-gray-700 space-y-1">
                                <p><strong>Name:</strong> ${order.shippingName}</p>
                                <p><strong>Phone:</strong> ${order.shippingPhone}</p>
                                <p><strong>Address:</strong> ${order.shippingAddress}, ${order.city}, ${order.postalCode}</p>
                            </div>
                        </div>

                        <!-- Order Items -->
                        <div class="border-t pt-4">
                            <h4 class="text-sm font-semibold text-gray-900 mb-3">
                                <i class="fas fa-box mr-1 text-green-600"></i>Order Items (${order.items.length})
                            </h4>
                            <div class="space-y-2 max-h-40 overflow-y-auto">
                                ${order.items.map(item => `
                                    <div class="flex justify-between items-center p-2 bg-gray-50 rounded-lg">
                                        <div class="flex-1">
                                            <p class="text-sm font-medium text-gray-900">${item.productName}</p>
                                            <p class="text-xs text-gray-500">ID: ${item.productId}</p>
                                        </div>
                                        <div class="text-right">
                                            <p class="text-sm font-medium text-gray-900">৳${item.totalPrice.toFixed(2)}</p>
                                            <p class="text-xs text-gray-500">${item.quantity} × ৳${item.unitPrice.toFixed(2)}</p>
                                        </div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="mt-6 pt-4 border-t flex gap-2">
                            <button onclick="location.href='/OrderMvc/OrderDetails/${order.id}'" class="flex-1 px-3 py-2 bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100 transition-colors text-sm font-medium">
                                <i class="fas fa-eye mr-1"></i>View Details
                            </button>
                            <button onclick="deleteOrder(${order.id})" class="flex-1 px-3 py-2 bg-red-50 text-red-700 rounded-lg hover:bg-red-100 transition-colors text-sm font-medium">
                                <i class="fas fa-trash mr-1"></i>Delete Order
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');

            }

            function getStatusBadge(status) {
                const badges = {
                    'pending': 'bg-yellow-100 text-yellow-800',
                    'confirmed': 'bg-blue-100 text-blue-800',
                    'shipped': 'bg-purple-100 text-purple-800',
                    'delivered': 'bg-green-100 text-green-800',
                    'cancelled': 'bg-red-100 text-red-800'
                };
                return badges[status ? status.toLowerCase() : 'unknown'] || 'bg-gray-100 text-gray-800';
            }

            async function updateStatus(orderId, newStatus) {
                try {
                    const token = localStorage.getItem("token");
                    if (!token) {
                        alert("No admin token found");
                        return;
                    }

                    const response = await fetch(`/api/OrdersApi/ChangeStatus/${orderId}?status=${newStatus}`, {
                        method: "PUT",
                        headers: {
                            "Authorization": `Bearer ${token}`,
                            "Content-Type": "application/json"
                        }
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        alert("Failed: " + (error.message || "Could not update status"));
                        return;
                    }

                    alert("Status updated!");
                    refreshOrders();
                } catch (err) {
                    console.error("Error updating status:", err);
                    alert("Error updating status");
                }
            }

            async function deleteOrder(orderId) {
                if (!confirm("Are you sure you want to delete this order?")) {
                    return;
                }

                try {
                    const token = localStorage.getItem("token");
                    if (!token) {
                        alert("No admin token found");
                        return;
                    }

                    const response = await fetch(`/api/OrdersApi/${orderId}`, {
                        method: "DELETE",
                        headers: {
                            "Authorization": `Bearer ${token}`,
                            "Content-Type": "application/json"
                        }
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        alert("Failed: " + (error.message || "Could not delete order"));
                        return;
                    }

                    alert("Order deleted!");
                    refreshOrders();
                } catch (err) {
                    console.error("Error deleting order:", err);
                    alert("Error deleting order");
                }
            }

            function showLoading() {
                document.getElementById('loadingState').classList.remove('hidden');
                document.getElementById('ordersContainer').classList.add('hidden');
                document.getElementById('emptyState').classList.add('hidden');
            }

            function hideLoading() {
                document.getElementById('loadingState').classList.add('hidden');
            }

            function refreshOrders() {
                const statusFilter = document.getElementById('statusFilter').value;
                fetchOrders(statusFilter);
            }

            function filterOrders() {
                const statusFilter = document.getElementById('statusFilter').value;
                fetchOrders(statusFilter);
            }

            // Event Listeners
            document.getElementById('statusFilter').addEventListener('change', filterOrders);

            // Initialize
            document.addEventListener('DOMContentLoaded', () => fetchOrders());
        </script>
    }
</body>
</html>